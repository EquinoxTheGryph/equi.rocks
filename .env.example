################################################
###      Use the following section on        ###
### a Production and Vanilla Dev Environment ###
################################################

# Database settings
POSTGRES_USER = 'YourUserName'
POSTGRES_PASSWORD = 'YourPassword'
POSTGRES_DB = 'YourDatabaseName'

# Database connection
DATABASE_HOST = 'database'
DATABASE_PORT = 5432
DATABASE_URL = "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/${POSTGRES_DB}?sslmode=disable"


######################################
### Use the following section on a ###
###    Nix(OS) Dev Environment     ###
### (Don't use the section before) ###
######################################

# Database connection
DATABASE_URL = "postgres://${USER}@${PGHOST}:5432/${PGDATABASE}?sslmode=disable"


###########################################
### Always insert the following section ###
###########################################

# The ADMIN_ options are used for the configuration panel

# ADMIN_USER - The administrator user name
ADMIN_USER = 'admin'

# ADMIN_PASS - Generate one by running `npm run passwd` and pasting the result here
ADMIN_PASS = '$2b$13$xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'

# ADMIN_SECRET - Generate one by running `npm run tokengen` and pasting the result here
ADMIN_SECRET = 'YourSecretKeyHere'

# ADMIN_TOTP_SECRET - (If two step verification is needed) 
#   Generate one by running `npm run totpgen` and pasting the result here
ADMIN_TOTP_SECRET = 'BASE32TOTPSECRET'

# AUTH_TRUST_HOST - Not recommended, but it solves some undocumented error in production
AUTH_TRUST_HOST = true

#########################################
### If you use Cloudflare (like I do) ###
#########################################

# Follow the guide: https://samjmck.com/en/blog/using-caddy-with-cloudflare/#2-using-a-lets-encrypt-certificate
# And paste the API token here:
CLOUDFLARE_AUTH_TOKEN = 'TOKEN_HERE'